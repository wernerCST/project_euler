/**
 * 
 * Each new term in the Fibonacci sequence is generated by adding the 
 * previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not 
 * exceed four million, find the sum of the even-valued terms.

 */

let limit = 4000000;

let current = 1;
let pre = 0;
let sum = 0;
let fibList = [];
let evenSum = 0;

while(true) { 
    sum = current + pre;
    if(sum > limit) {
        break;
    } else if (sum % 2 == 0) {
        fibList.push(sum);
        evenSum += sum;
    }    
    pre = current;
    current = sum;    
}

console.log(`List of even fibinaci numbers ${fibList.toString()} and the sum of these is ${evenSum}`);

/** 
 * Here I went with a while loop and made it always true because I needed a way to loop
 * without knowing the range and breaking out of it once the current fibinaci number
 * has not exceed the 4,000,000 mark. I used the modulus of 2 to find the even ones.
 * Note that using while loops and making it always true is risky and can lead to 
 * an infinite loop and will need refactoring.
 */


